name: Build and Release

on:
  push:
    branches: [ master, main ]  

jobs:
  extract-version:
    name: Extract Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      tag: ${{ steps.get-version.outputs.tag }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Extract version from pyproject.toml
      id: get-version
      run: |
        VERSION=$(grep "version = " pyproject.toml | cut -d'"' -f2)
        TAG="v$VERSION"
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "Extracted version: $VERSION"
        echo "Release tag: $TAG"

    - name: Check if release already exists
      run: |
        TAG="${{ steps.get-version.outputs.tag }}"
        if git tag --list | grep -q "^$TAG$"; then
          echo "Tag $TAG already exists!"
          echo "This version has already been released."
          echo "Please update the version in pyproject.toml"
          exit 1
        fi
        echo "Tag $TAG is available for release"

  test:
    name: Run Tests
    runs-on: windows-latest
    needs: extract-version
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true

    - name: Configure Poetry
      run: |
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      run: poetry install

    - name: Run tests
      run: |
        Write-Host " MASTER BRANCH RELEASE - Running full test suite before release..."
        poetry run pytest tests/ -v --tb=short

    - name: Test results
      run: |
        Write-Host "All tests passed! Proceeding with PRODUCTION RELEASE build."

  build:
    name: Build Executable
    runs-on: windows-latest
    needs: [extract-version, test]
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true

    - name: Configure Poetry
      run: |
        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true

    - name: Install dependencies
      run: poetry install

    - name: Add PyInstaller
      run: poetry add --group dev pyinstaller

    - name: Build executable
      run: |
        Write-Host "Building PRODUCTION RELEASE: BitCraft Companion v${{ needs.extract-version.outputs.version }}"
        Write-Host "Creating distributable executable from master branch..."
        poetry run python -m PyInstaller --clean bitcraft_companion.spec

    - name: Verify build
      id: verify-build
      run: |
        if (Test-Path "dist\*.exe") {
          $exe = Get-ChildItem "dist\*.exe" | Select-Object -First 1
          $filename = $exe.Name
          $filesize = [math]::Round($exe.Length/1MB, 2)
          
          echo "filename=$filename" >> $env:GITHUB_OUTPUT
          echo "filesize=$filesize" >> $env:GITHUB_OUTPUT
          
          Write-Host " successful!"
          Write-Host "Executable: $filename"
          Write-Host "Size: $filesize MB"
        } else {
          Write-Host "Build failed - no executable found"
          exit 1
        }

    - name: Upload build artifact
      uses: actions/upload-artifact@v3
      with:
        name: bitcraft-companion-${{ needs.extract-version.outputs.version }}
        path: dist/*.exe
        retention-days: 30

    outputs:
      filename: ${{ steps.verify-build.outputs.filename }}
      filesize: ${{ steps.verify-build.outputs.filesize }}

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [extract-version, build]
    permissions:
      contents: write
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history for changelog

    - name: Download build artifact
      uses: actions/download-artifact@v3
      with:
        name: bitcraft-companion-${{ needs.extract-version.outputs.version }}
        path: ./release-assets

    - name: Generate changelog
      id: changelog
      run: |
        VERSION="${{ needs.extract-version.outputs.version }}"
        
        # Get the previous tag
        PREV_TAG=$(git tag --sort=-version:refname | head -n 1 || echo "")
        
        if [ -z "$PREV_TAG" ]; then
          echo "No previous tags found, generating changelog from all commits"
          COMMITS=$(git log --oneline --pretty=format:"- %s" | head -20)
        else
          echo "Generating changelog since $PREV_TAG"
          COMMITS=$(git log ${PREV_TAG}..HEAD --oneline --pretty=format:"- %s")
        fi
        
        # Create changelog
        CHANGELOG="## What's Changed in v${VERSION}

$COMMITS

**Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREV_TAG}...${{ needs.extract-version.outputs.tag }}

## Installation
1. Download \`${{ needs.build.outputs.filename }}\` from the assets below
2. Run the executable (Windows Defender may require approval for unsigned executables)
3. The application will guide you through the setup process

## Technical Details
- **Version**: $VERSION  
- **File Size**: ${{ needs.build.outputs.filesize }} MB
- **Tests Passed**: All 120+ tests validated
- **Build Date**: $(date -u +%Y-%m-%d)
- **Python Version**: 3.10+"

        # Save to file for release
        echo "$CHANGELOG" > changelog.md
        
        # Also output for step summary
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.extract-version.outputs.tag }}
        release_name: "BitCraft Companion ${{ needs.extract-version.outputs.tag }}"
        body_path: changelog.md
        draft: false
        prerelease: false

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release-assets/${{ needs.build.outputs.filename }}
        asset_name: ${{ needs.build.outputs.filename }}
        asset_content_type: application/octet-stream

    - name: Release Summary
      run: |
        echo "##  Release Created Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Version**: ${{ needs.extract-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "**Tag**: ${{ needs.extract-version.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
        echo "**Executable**: ${{ needs.build.outputs.filename }}" >> $GITHUB_STEP_SUMMARY
        echo "**Size**: ${{ needs.build.outputs.filesize }} MB" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Download Link:" >> $GITHUB_STEP_SUMMARY
        echo "[Download BitCraft Companion ${{ needs.extract-version.outputs.tag }}](https://github.com/${{ github.repository }}/releases/tag/${{ needs.extract-version.outputs.tag }})" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Changelog:" >> $GITHUB_STEP_SUMMARY
        echo "${{ steps.changelog.outputs.changelog }}" >> $GITHUB_STEP_SUMMARY

  notify-success:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: [extract-version, release]
    if: success()
    steps:
    - name: Success notification
      run: |
        echo "PRODUCTION RELEASE SUCCESSFUL!"
        echo ""
        echo "BitCraft Companion ${{ needs.extract-version.outputs.tag }} has been released from master branch!"
        echo ""
        echo "Master branch tests passed"
        echo "Production build completed" 
        echo "GitHub release created"
        echo "Executable uploaded and ready for download"
        echo ""
        echo "Download the latest release:"
        echo "https://github.com/${{ github.repository }}/releases/tag/${{ needs.extract-version.outputs.tag }}"
        echo ""
        echo "View all releases:"
        echo "https://github.com/${{ github.repository }}/releases"